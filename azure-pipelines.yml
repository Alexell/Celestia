trigger:
- main

strategy:
  matrix:
    Linux:
      imageName: 'ubuntu-latest'
    Mac:
      imageName: 'macos-latest'
    Win:
      imageName: 'windows-latest'

pool:
  vmImage: $(imageName)

steps:
- checkout: self
  submodules: true

- bash:  echo "##vso[task.setvariable variable=shellopts]errexit"
  displayName: "Force exit on error (bash)"
  condition: not( eq( variables['Agent.OS'], 'Windows_NT' ) )

- script: |
    sudo apt update
    sudo apt install -y libeigen3-dev \
                        libepoxy-dev \
                        libtheora-dev \
                        libavcodec-dev \
                        libavformat-dev \
                        libavutil-dev \
                        libswscale-dev \
                        libjpeg-dev \
                        libpng-dev \
                        libglu1-mesa-dev \
                        qtbase5-dev \
                        qtbase5-dev-tools \
                        libqt5opengl5-dev \
                        libgtk2.0-dev \
                        libgtkglext1-dev \
                        libfreetype6-dev \
                        libsdl2-dev \
                        libluajit-5.1-dev \
                        libfmt-dev
  displayName: 'Install GNU/Linux dependencies'
  condition: eq( variables['Agent.OS'], 'Linux' )

- script: |
    brew install pkg-config \
                 eigen \
                 theora \
                 ffmpeg \
                 gtk+ \
                 gtkglext \
                 cspice \
                 fmt \
                 jpeg \
                 gettext \
                 libpng \
                 lua \
                 qt5 \
                 freetype \
                 libepoxy \
                 sdl2
    brew link gettext --force
    brew link lua --force
  displayName: 'Install macOS dependencies'
  condition: eq( variables['Agent.OS'], 'Darwin' )


# Cache/restore the vcpkg's build artifacts.
- task: Cache@2
  inputs:
    key: vcpkg | "$(Agent.OS)"
    restoreKeys: vcpkg
    path: 'c:/vcpkg/installed'
  displayName: "Cache vcpkg's artifacts"
  condition: eq( variables['Agent.OS'], 'Windows_NT' )

- script: |
    vcpkg --triplet=x86-windows install --recurse libpng libjpeg-turbo gettext luajit fmt libepoxy eigen3 freetype cspice ffmpeg
  displayName: 'Install Windows dependencies'
  condition: eq( variables['Agent.OS'], 'Windows_NT' )

- script: |
    mkdir build
    cd build
    cmake -DENABLE_SPICE=ON -DENABLE_TOOLS=ON -DENABLE_TESTS=ON -DENABLE_SDL=ON -DENABLE_GTK=ON -DENABLE_FFMPEG=ON -DENABLE_DATA=OFF ..
    make -j $(nproc || echo 4)
    CTEST_OUTPUT_ON_FAILURE=1 ctest
  workingDirectory: "$(system.defaultworkingdirectory)"
  displayName: "Build and test on GNU/Linux and macOS"
  condition: not( eq( variables['Agent.OS'], 'Windows_NT' ) )

- script: |
    mkdir build
    cd build
    @rem cmake -DCMAKE_FIND_DEBUG_MODE=ON -DCMAKE_GENERATOR_PLATFORM=WIN32 -DCMAKE_TOOLCHAIN_FILE=c:/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x86-windows -DENABLE_SPICE=ON -DENABLE_TOOLS=ON -DENABLE_TESTS=ON -DENABLE_SDL=OFF -DENABLE_QT=OFF -DENABLE_FFMPEG=ON -DENABLE_WIN=ON -DENABLE_DATA=OFF ..
    @rem cmake --build . --config RelWithDebInfo -- /maxcpucount:4 /nologo
    set CTEST_OUTPUT_ON_FAILURE=1
    @rem copy src\celestia\RelWithDebInfo\*.dll test\unit\RelWithDebInfo\
    @rem ctest -C RelWithDebInfo
  workingDirectory: "$(system.defaultworkingdirectory)"
  displayName: "Build and test on Windows"
  condition: eq( variables['Agent.OS'], 'Windows_NT' )
